import numpy as np

from pydoku import find_empty_cell, get_valid_values, solved, valid_board, valid_boxes


def test_find_empty_cell_on_empty_board():
    board = np.array(
        [
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]
    )
    assert find_empty_cell(board) == (0, 0)


def test_find_empty_cell():
    board = np.array(
        [
            [1, 2, 3, 0, 0, 0, 0, 0, 0],
            [0, 7, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 9, 0, 0, 0, 0, 0, 0, 0],
            [8, 7, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]
    )
    assert find_empty_cell(board) == (0, 3)


def test_valid_values():
    board = np.array(
        [
            [1, 3, 5, 2, 0, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 0, 5, 3],
            [7, 0, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 0, 7, 3, 9, 6, 4, 5],
            [5, 9, 0, 8, 6, 4, 2, 3, 1],
            [0, 4, 0, 1, 5, 2, 9, 7, 8],
            [4, 0, 6, 5, 7, 1, 3, 8, 9],
            [3, 0, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert get_valid_values(board, (0, 4)) == [9]
    assert get_valid_values(board, (1, 6)) == [7]
    assert get_valid_values(board, (5, 2)) == [3]


def test_valid_values_with_no_valid_values():
    board = np.array(
        [
            [1, 3, 5, 2, 0, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 0, 5, 3],
            [7, 0, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 0, 7, 3, 9, 6, 4, 5],
            [5, 9, 0, 8, 6, 4, 2, 3, 1],
            [0, 4, 0, 1, 5, 2, 9, 7, 8],
            [4, 0, 6, 5, 7, 1, 3, 8, 9],
            [3, 0, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert get_valid_values(board, (8, 7)) == []


def test_solved():
    board = np.array(
        [
            [1, 3, 5, 2, 9, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 7, 5, 3],
            [7, 6, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 8, 7, 3, 9, 6, 4, 5],
            [5, 9, 7, 8, 6, 4, 2, 3, 1],
            [6, 4, 3, 1, 5, 2, 9, 7, 8],
            [4, 2, 6, 5, 7, 1, 3, 8, 9],
            [3, 5, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert solved(board)


def test_solved_with_empty_cells():
    board = np.array(
        [
            [1, 3, 5, 2, 9, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 0, 5, 3],
            [7, 0, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 8, 7, 3, 9, 6, 4, 5],
            [5, 9, 7, 8, 6, 4, 2, 3, 1],
            [6, 4, 3, 1, 5, 2, 9, 7, 8],
            [4, 2, 6, 5, 7, 1, 3, 8, 9],
            [3, 5, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert not solved(board)


def test_valid_board():
    board = np.array(
        [
            [1, 3, 5, 2, 9, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 7, 5, 3],
            [7, 6, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 8, 7, 3, 9, 6, 4, 5],
            [5, 9, 7, 8, 6, 4, 2, 3, 1],
            [6, 4, 3, 1, 5, 2, 9, 7, 8],
            [4, 2, 6, 5, 7, 1, 3, 8, 9],
            [3, 5, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert valid_board(board)


def test_valid_board_on_empty_board():
    board = np.array(
        [
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]
    )
    assert valid_board(board)


def test_valid_board_with_invalid_row():
    board = np.array(
        [
            [1, 4, 5, 2, 9, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 7, 5, 3],
            [7, 6, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 8, 7, 3, 9, 6, 4, 5],
            [5, 9, 7, 8, 6, 4, 2, 3, 1],
            [6, 3, 3, 1, 5, 2, 9, 7, 8],
            [4, 2, 6, 5, 7, 1, 3, 8, 9],
            [3, 5, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert not valid_board(board)


def test_valid_board_with_invalid_column():
    board = np.array(
        [
            [1, 3, 5, 2, 9, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 7, 5, 3],
            [1, 6, 4, 3, 8, 5, 7, 9, 2],
            [2, 1, 8, 7, 3, 9, 6, 4, 5],
            [5, 9, 7, 8, 6, 4, 2, 3, 1],
            [6, 4, 3, 1, 5, 2, 9, 7, 8],
            [4, 2, 6, 5, 7, 1, 3, 8, 9],
            [3, 5, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert not valid_board(board)


def test_valid_boxes():
    board = np.array(
        [
            [1, 3, 5, 2, 9, 7, 8, 6, 4],
            [9, 8, 2, 4, 1, 6, 7, 5, 3],
            [7, 6, 4, 3, 8, 5, 1, 9, 2],
            [2, 1, 8, 7, 3, 9, 6, 4, 5],
            [5, 9, 7, 8, 6, 4, 2, 3, 1],
            [6, 4, 3, 1, 5, 2, 9, 7, 8],
            [4, 2, 6, 5, 7, 1, 3, 8, 9],
            [3, 5, 9, 6, 2, 8, 4, 1, 7],
            [8, 7, 1, 9, 4, 3, 5, 2, 6],
        ]
    )
    assert valid_boxes(board)
